{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib as mp\n",
    "import re\n",
    "import plotly.plotly as py\n",
    "import plotly.graph_objs as go\n",
    "import sklearn as sk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df_train = pd.read_csv('Data/train.csv', encoding='ISO-8859-1')\n",
    "df_attr = pd.read_csv('Data/attributes.csv',  encoding='ISO-8859-1')\n",
    "df_prod_desc = pd.read_csv('Data/attributes.csv', encoding='ISO-8859-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['product_uid', 'name', 'value'], dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_attr."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "  \n",
       "    \n",
       "      \n",
       "      product_uid\n",
       "      name\n",
       "    \n",
       "    \n",
       "      value\n",
       "      \n",
       "      \n",
       "    \n",
       "  \n",
       "  \n",
       "    \n",
       "      .Combination Pack\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      0\n",
       "      99\n",
       "      99\n",
       "    \n",
       "    \n",
       "      000\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      1\n",
       "      5\n",
       "      5\n",
       "    \n",
       "    \n",
       "      1800\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2000\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      2200\n",
       "      11\n",
       "      11\n",
       "    \n",
       "    \n",
       "      22000\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2300\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2450\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      2500\n",
       "      29\n",
       "      29\n",
       "    \n",
       "    \n",
       "      2525\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2550\n",
       "      5\n",
       "      5\n",
       "    \n",
       "    \n",
       "      2600\n",
       "      8\n",
       "      8\n",
       "    \n",
       "    \n",
       "      2610\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2650\n",
       "      9\n",
       "      9\n",
       "    \n",
       "    \n",
       "      2700\n",
       "      372\n",
       "      372\n",
       "    \n",
       "    \n",
       "      2720\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2730\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      2740\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2750\n",
       "      11\n",
       "      11\n",
       "    \n",
       "    \n",
       "      2780\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2790\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      2800\n",
       "      34\n",
       "      34\n",
       "    \n",
       "    \n",
       "      2810\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2850\n",
       "      14\n",
       "      14\n",
       "    \n",
       "    \n",
       "      2860\n",
       "      4\n",
       "      4\n",
       "    \n",
       "    \n",
       "      2880\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      2900\n",
       "      48\n",
       "      48\n",
       "    \n",
       "    \n",
       "      2920\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      ...\n",
       "      ...\n",
       "      ...\n",
       "    \n",
       "    \n",
       "      muree primrose\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze (greenish tints)\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze finish with alabaster glass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze finish with alabaster glass shade\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze finish with alabaster glass shades\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze finish with clear glass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      oil rubbed bronze with alabaster glass shade\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      oiled bronze\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      pattern\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      polished brass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      polished bronze\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      polished nickel\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      polished stainless steel\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      red\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      red, green and blue glass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      restoration bronze\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      rust\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      sand\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      satin nickel finish with alabaster glass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      satin nickel finish with alabaster glass shade\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      satin nickel finish with clear glass\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      satin nickel finish with frosted glass shades\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      silver\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      solid\n",
       "      3\n",
       "      3\n",
       "    \n",
       "    \n",
       "      steel\n",
       "      6\n",
       "      6\n",
       "    \n",
       "    \n",
       "      the color is Bronze\n",
       "      1\n",
       "      1\n",
       "    \n",
       "    \n",
       "      white\n",
       "      24\n",
       "      24\n",
       "    \n",
       "    \n",
       "      white lens\n",
       "      2\n",
       "      2\n",
       "    \n",
       "    \n",
       "      white plastic\n",
       "      1\n",
       "      1\n",
       "    \n",
       "  \n",
       "\n",
       "1154 rows Ã— 2 columns\n",
       ""
      ],
      "text/plain": [
       "                                                    product_uid  name\n",
       "value                                                                \n",
       ".Combination Pack                                             2     2\n",
       "0                                                            99    99\n",
       "000                                                           1     1\n",
       "1                                                             5     5\n",
       "1800                                                          1     1\n",
       "2000                                                          2     2\n",
       "2200                                                         11    11\n",
       "22000                                                         1     1\n",
       "2300                                                          1     1\n",
       "2450                                                          2     2\n",
       "2500                                                         29    29\n",
       "2525                                                          1     1\n",
       "2550                                                          5     5\n",
       "2600                                                          8     8\n",
       "2610                                                          1     1\n",
       "2650                                                          9     9\n",
       "2700                                                        372   372\n",
       "2720                                                          1     1\n",
       "2730                                                          3     3\n",
       "2740                                                          1     1\n",
       "2750                                                         11    11\n",
       "2780                                                          1     1\n",
       "2790                                                          3     3\n",
       "2800                                                         34    34\n",
       "2810                                                          1     1\n",
       "2850                                                         14    14\n",
       "2860                                                          4     4\n",
       "2880                                                          1     1\n",
       "2900                                                         48    48\n",
       "2920                                                          3     3\n",
       "...                                                         ...   ...\n",
       "muree primrose                                                2     2\n",
       "oil rubbed bronze                                             2     2\n",
       "oil rubbed bronze (greenish tints)                            1     1\n",
       "oil rubbed bronze finish with alabaster glass                 1     1\n",
       "oil rubbed bronze finish with alabaster glass s...            3     3\n",
       "oil rubbed bronze finish with alabaster glass s...            1     1\n",
       "oil rubbed bronze finish with clear glass                     1     1\n",
       "oil rubbed bronze with alabaster glass shade                  1     1\n",
       "oiled bronze                                                  3     3\n",
       "pattern                                                       1     1\n",
       "polished brass                                                1     1\n",
       "polished bronze                                               1     1\n",
       "polished nickel                                               1     1\n",
       "polished stainless steel                                      1     1\n",
       "red                                                           2     2\n",
       "red, green and blue glass                                     1     1\n",
       "restoration bronze                                            1     1\n",
       "rust                                                          1     1\n",
       "sand                                                          1     1\n",
       "satin nickel finish with alabaster glass                      1     1\n",
       "satin nickel finish with alabaster glass shade                1     1\n",
       "satin nickel finish with clear glass                          1     1\n",
       "satin nickel finish with frosted glass shades                 1     1\n",
       "silver                                                        3     3\n",
       "solid                                                         3     3\n",
       "steel                                                         6     6\n",
       "the color is Bronze                                           1     1\n",
       "white                                                        24    24\n",
       "white lens                                                    2     2\n",
       "white plastic                                                 1     1\n",
       "\n",
       "[1154 rows x 2 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_attr[df_attr.name.str.contains('.Color.') == True].groupby('value').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def getPercStr1inStr2(str1, str2):\n",
    "    # tokenized_str1 = nltk.tokenize.word_tokenize(str(str1))\n",
    "    str2 = re.sub(r'[^\\x00-\\x7F]+',' ', str2)\n",
    "    tokenized_str1 = str1.split()\n",
    "    return sum([int(word in str2) for word in tokenized_str1])/float(len(tokenized_str1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getPercStr1inStr2(df_train['search_term'][0], df_train['product_title'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_train['search_in_title'] = list(map(lambda x: getPercStr1inStr2(df_train['search_term'][x], df_train['product_title'][x]), range(df_train.shape[0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "  \n",
       "    \n",
       "      \n",
       "      search_in_title\n",
       "    \n",
       "  \n",
       "  \n",
       "    \n",
       "      0\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      1\n",
       "      0.500000\n",
       "    \n",
       "    \n",
       "      2\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      3\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      4\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      5\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      6\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      7\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      8\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      9\n",
       "      0.500000\n",
       "    \n",
       "    \n",
       "      10\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      11\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      12\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      13\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      14\n",
       "      0.166667\n",
       "    \n",
       "    \n",
       "      15\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      16\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      17\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      18\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      19\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      20\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      21\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      22\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      23\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      24\n",
       "      0.500000\n",
       "    \n",
       "    \n",
       "      25\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      26\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      27\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      28\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      29\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      ...\n",
       "      ...\n",
       "    \n",
       "    \n",
       "      74037\n",
       "      0.200000\n",
       "    \n",
       "    \n",
       "      74038\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74039\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74040\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74041\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74042\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74043\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74044\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74045\n",
       "      0.250000\n",
       "    \n",
       "    \n",
       "      74046\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74047\n",
       "      0.250000\n",
       "    \n",
       "    \n",
       "      74048\n",
       "      0.375000\n",
       "    \n",
       "    \n",
       "      74049\n",
       "      0.200000\n",
       "    \n",
       "    \n",
       "      74050\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74051\n",
       "      0.250000\n",
       "    \n",
       "    \n",
       "      74052\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74053\n",
       "      0.250000\n",
       "    \n",
       "    \n",
       "      74054\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74055\n",
       "      0.250000\n",
       "    \n",
       "    \n",
       "      74056\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74057\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74058\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74059\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74060\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74061\n",
       "      0.166667\n",
       "    \n",
       "    \n",
       "      74062\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74063\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74064\n",
       "      0.142857\n",
       "    \n",
       "    \n",
       "      74065\n",
       "      0.000000\n",
       "    \n",
       "    \n",
       "      74066\n",
       "      0.200000\n",
       "    \n",
       "  \n",
       "\n",
       "74067 rows Ã— 1 columns\n",
       ""
      ],
      "text/plain": [
       "       search_in_title\n",
       "0             0.000000\n",
       "1             0.500000\n",
       "2             0.000000\n",
       "3             0.000000\n",
       "4             0.000000\n",
       "5             0.000000\n",
       "6             0.000000\n",
       "7             0.000000\n",
       "8             0.000000\n",
       "9             0.500000\n",
       "10            0.000000\n",
       "11            0.000000\n",
       "12            0.000000\n",
       "13            0.000000\n",
       "14            0.166667\n",
       "15            0.000000\n",
       "16            0.000000\n",
       "17            0.000000\n",
       "18            0.000000\n",
       "19            0.000000\n",
       "20            0.000000\n",
       "21            0.000000\n",
       "22            0.000000\n",
       "23            0.000000\n",
       "24            0.500000\n",
       "25            0.000000\n",
       "26            0.000000\n",
       "27            0.000000\n",
       "28            0.000000\n",
       "29            0.000000\n",
       "...                ...\n",
       "74037         0.200000\n",
       "74038         0.000000\n",
       "74039         0.000000\n",
       "74040         0.000000\n",
       "74041         0.000000\n",
       "74042         0.000000\n",
       "74043         0.000000\n",
       "74044         0.000000\n",
       "74045         0.250000\n",
       "74046         0.000000\n",
       "74047         0.250000\n",
       "74048         0.375000\n",
       "74049         0.200000\n",
       "74050         0.000000\n",
       "74051         0.250000\n",
       "74052         0.000000\n",
       "74053         0.250000\n",
       "74054         0.000000\n",
       "74055         0.250000\n",
       "74056         0.000000\n",
       "74057         0.000000\n",
       "74058         0.000000\n",
       "74059         0.000000\n",
       "74060         0.000000\n",
       "74061         0.166667\n",
       "74062         0.000000\n",
       "74063         0.000000\n",
       "74064         0.142857\n",
       "74065         0.000000\n",
       "74066         0.200000\n",
       "\n",
       "[74067 rows x 1 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(df_train['search_in_title'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'module' object has no attribute 'hist'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m\u001b[0m in \u001b[0;36m\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpatches\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf_train\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'search_in_title'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m50\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnormed\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfacecolor\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'green'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.75\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m: 'module' object has no attribute 'hist'"
     ]
    }
   ],
   "source": [
    "n, bins, patches = mp.hist(df_train['search_in_title'], 50, normed=1, facecolor='green', alpha=0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        False\n",
       "1        False\n",
       "2        False\n",
       "3        False\n",
       "4        False\n",
       "5        False\n",
       "6        False\n",
       "7        False\n",
       "8        False\n",
       "9        False\n",
       "10       False\n",
       "11       False\n",
       "12       False\n",
       "13       False\n",
       "14       False\n",
       "15       False\n",
       "16       False\n",
       "17        True\n",
       "18        True\n",
       "19       False\n",
       "20       False\n",
       "21        True\n",
       "22       False\n",
       "23       False\n",
       "24        True\n",
       "25       False\n",
       "26       False\n",
       "27       False\n",
       "28       False\n",
       "29       False\n",
       "         ...  \n",
       "74037     True\n",
       "74038     True\n",
       "74039    False\n",
       "74040    False\n",
       "74041    False\n",
       "74042     True\n",
       "74043    False\n",
       "74044    False\n",
       "74045     True\n",
       "74046    False\n",
       "74047     True\n",
       "74048    False\n",
       "74049     True\n",
       "74050    False\n",
       "74051    False\n",
       "74052    False\n",
       "74053    False\n",
       "74054    False\n",
       "74055     True\n",
       "74056    False\n",
       "74057    False\n",
       "74058    False\n",
       "74059    False\n",
       "74060    False\n",
       "74061    False\n",
       "74062     True\n",
       "74063    False\n",
       "74064    False\n",
       "74065    False\n",
       "74066    False\n",
       "Name: relevance, dtype: bool"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['relevance']<2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df_trainedModel = pd.read_table('Data/train_with_features.csv', sep=\"|\", quotechar=\" \", encoding='ISO-8859-1')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['\"product_uid\"', '\"id\"', '\"product_title\"', '\"search_term\"',\n",
       "       '\"relevance\"', '\"product_description\"', '\"perc_term_in_title\"',\n",
       "       '\"perc_term_in_descr\"', '\"whole_term_in_title\"',\n",
       "       '\"whole_term_in_descr\"', '\"search_term_length\"'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_trainedModel.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Renaming to remove the quotes from the beginning of the col names\n",
    "df_trainedModel.rename(columns=lambda x: x[:-1], inplace=True)\n",
    "df_trainedModel.rename(columns=lambda x: x[1:], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df_trainedModel_data = df_trainedModel[['perc_term_in_title','perc_term_in_descr','whole_term_in_title','whole_term_in_descr','search_term_length']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import math\n",
    "df_trainedModel_target = df_trainedModel['relevance'].map(lambda x: math.floor(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"1\"        3\n",
       "\"2\"        2\n",
       "\"3\"        3\n",
       "\"4\"        2\n",
       "\"5\"        2\n",
       "\"6\"        3\n",
       "\"7\"        2\n",
       "\"8\"        3\n",
       "\"9\"        2\n",
       "\"10\"       3\n",
       "\"11\"       2\n",
       "\"12\"       3\n",
       "\"13\"       3\n",
       "\"14\"       2\n",
       "\"15\"       2\n",
       "\"16\"       2\n",
       "\"17\"       3\n",
       "\"18\"       1\n",
       "\"19\"       1\n",
       "\"20\"       2\n",
       "\"21\"       2\n",
       "\"22\"       1\n",
       "\"23\"       2\n",
       "\"24\"       2\n",
       "\"25\"       1\n",
       "\"26\"       2\n",
       "\"27\"       2\n",
       "\"28\"       2\n",
       "\"29\"       2\n",
       "\"30\"       2\n",
       "          ..\n",
       "\"74038\"    1\n",
       "\"74039\"    1\n",
       "\"74040\"    2\n",
       "\"74041\"    2\n",
       "\"74042\"    2\n",
       "\"74043\"    1\n",
       "\"74044\"    3\n",
       "\"74045\"    2\n",
       "\"74046\"    1\n",
       "\"74047\"    2\n",
       "\"74048\"    1\n",
       "\"74049\"    2\n",
       "\"74050\"    1\n",
       "\"74051\"    2\n",
       "\"74052\"    2\n",
       "\"74053\"    2\n",
       "\"74054\"    2\n",
       "\"74055\"    2\n",
       "\"74056\"    1\n",
       "\"74057\"    2\n",
       "\"74058\"    2\n",
       "\"74059\"    3\n",
       "\"74060\"    3\n",
       "\"74061\"    2\n",
       "\"74062\"    3\n",
       "\"74063\"    1\n",
       "\"74064\"    3\n",
       "\"74065\"    2\n",
       "\"74066\"    3\n",
       "\"74067\"    2\n",
       "Name: relevance, dtype: int64"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_trainedModel_target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "gnb = GaussianNB()\n",
    "new_model = gnb.fit(df_trainedModel_data, df_trainedModel_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_pred= new_model.predict(df_trainedModel_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 1, 2, ..., 2, 2, 2])"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of mislabeled points out of a total 74067 points : 32285\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of mislabeled points out of a total %d points : %d\" % (df_trainedModel_data.shape[0],(df_trainedModel_target != y_pred).sum()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn import svm\n",
    "clf = svm.SVC()\n",
    "y_pred2 = clf.fit(df_trainedModel_data, df_trainedModel_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred2 = clf.predict(df_trainedModel_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print('jello')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
