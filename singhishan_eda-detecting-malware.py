import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns
pd.options.display.max_columns = 100
import time
import os
print(os.listdir("../input"))
import warnings
warnings.simplefilter('ignore', FutureWarning)
# reading a subset of the data for EDA:
train = pd.read_csv('../input/train.csv', nrows=1000000, low_memory=False)

# Distribution of interest variable in the training dataset:
sns.countplot(train.HasDetections)
# Create a list of Numerical columns and Generate a summary of the data.
numeric_columns = train._get_numeric_data().columns
train[numeric_columns].describe().T
# What proportion of the data is missing:
(train[numeric_columns].isnull().sum().sort_values(ascending = False)[:43]/train.shape[0])[:37]
# Create a list of Categorical columns and Generate a summary of the data.
categorical_columns = train[train.columns[~train.columns.isin(numeric_columns)]].columns
train[categorical_columns].describe().T
# Percentage of missing data in Categorical Columns
(train[categorical_columns].isnull().sum().sort_values(ascending = False)[:43]/train.shape[0])[:9]
# Step 2:

# Getting list of columns with a constant value (This will be dropped later)
drop_these_columns = [c for c in train.columns if train[c].nunique(dropna=False)==1 ]
drop_these_columns
# Step 3:

def plot_variables(var1, var2, arr=(16,6)):
    plt.figure(figsize=arr)
    plt.subplot(1, 2, 1)
    sns.countplot(train[var1])
    plt.xticks(rotation=45)
    plt.subplot(1, 2, 2)
    sns.barplot(train[var1], train[var2])
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.show()
#     print(pd.crosstab(train[var1], train[var2]).T)

# Get understanding of the distribution and interaction of various features with the response variable:
for i in categorical_columns:
    if train[i].nunique() < 15:  # limited to 15 so that the chart remains understandable
        print(i)
        plot_variables(i, "HasDetections")